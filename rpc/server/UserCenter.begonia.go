// Code generated by Begonia. DO NOT EDIT.
// versions:
// 	Begonia v1.0.2
// source: server\server.go
// begonia server file

package main

import (
	"context"
	"errors"
	"github.com/MashiroC/begonia/app"
	"github.com/MashiroC/begonia/app/coding"
	cRegister "github.com/MashiroC/begonia/core/register"
)

var (
	_UserCenterFuncList []cRegister.FunInfo

	_UserCenterSayHelloInSchema = `
{
			"namespace":"begonia.func.SayHello",
			"type":"record",
			"name":"In",
			"fields":[
				{"name":"F1","type":"string","alias":"name"}

			]
		}`
	_UserCenterSayHelloOutSchema = `
{
			"namespace":"begonia.func.SayHello",
			"type":"record",
			"name":"Out",
			"fields":[
				{"name":"F1","type":"string"}

			]
		}`
	_UserCenterSayHelloInCoder  coding.Coder
	_UserCenterSayHelloOutCoder coding.Coder

	_UserCenterRegisterInSchema = `
{
			"namespace":"begonia.func.Register",
			"type":"record",
			"name":"In",
			"fields":[
				{"name":"F1","type":"string","alias":"username"}
,{"name":"F2","type":"string","alias":"password"}

			]
		}`
	_UserCenterRegisterOutSchema = `
{
			"namespace":"begonia.func.Register",
			"type":"record",
			"name":"Out",
			"fields":[
				{"name":"F1","type":"boolean"}
,{"name":"F1","type":"string"}

			]
		}`
	_UserCenterRegisterInCoder  coding.Coder
	_UserCenterRegisterOutCoder coding.Coder

	_UserCenterLoginInSchema = `
{
			"namespace":"begonia.func.Login",
			"type":"record",
			"name":"In",
			"fields":[
				{"name":"F1","type":"string","alias":"username"}
,{"name":"F2","type":"string","alias":"password"}

			]
		}`
	_UserCenterLoginOutSchema = `
{
			"namespace":"begonia.func.Login",
			"type":"record",
			"name":"Out",
			"fields":[
				{"name":"F1","type":"boolean"}
,{"name":"F1","type":"int"}

			]
		}`
	_UserCenterLoginInCoder  coding.Coder
	_UserCenterLoginOutCoder coding.Coder

	_UserCenterChangePasswordInSchema = `
{
			"namespace":"begonia.func.ChangePassword",
			"type":"record",
			"name":"In",
			"fields":[
				{"name":"F1","type":"string","alias":"username"}
,{"name":"F2","type":"string","alias":"newPassword"}

			]
		}`
	_UserCenterChangePasswordOutSchema = `
{
			"namespace":"begonia.func.ChangePassword",
			"type":"record",
			"name":"Out",
			"fields":[
				
			]
		}`
	_UserCenterChangePasswordInCoder  coding.Coder
	_UserCenterChangePasswordOutCoder coding.Coder
)

type _UserCenterSayHelloIn struct {
	F1 string
}

type _UserCenterSayHelloOut struct {
	F1 string
}

type _UserCenterRegisterIn struct {
	F1 string
	F2 string
}

type _UserCenterRegisterOut struct {
	F1 bool
	F2 string
}

type _UserCenterLoginIn struct {
	F1 string
	F2 string
}

type _UserCenterLoginOut struct {
	F1 bool
	F2 int
}

type _UserCenterChangePasswordIn struct {
	F1 string
	F2 string
}

type _UserCenterChangePasswordOut struct {
}

func init() {
	app.ServiceAppMode = app.Ast

	var err error

	_UserCenterSayHelloInCoder, err = coding.NewAvro(_UserCenterSayHelloInSchema)
	if err != nil {
		panic(err)
	}
	_UserCenterSayHelloOutCoder, err = coding.NewAvro(_UserCenterSayHelloOutSchema)
	if err != nil {
		panic(err)
	}

	_UserCenterRegisterInCoder, err = coding.NewAvro(_UserCenterRegisterInSchema)
	if err != nil {
		panic(err)
	}
	_UserCenterRegisterOutCoder, err = coding.NewAvro(_UserCenterRegisterOutSchema)
	if err != nil {
		panic(err)
	}

	_UserCenterLoginInCoder, err = coding.NewAvro(_UserCenterLoginInSchema)
	if err != nil {
		panic(err)
	}
	_UserCenterLoginOutCoder, err = coding.NewAvro(_UserCenterLoginOutSchema)
	if err != nil {
		panic(err)
	}

	_UserCenterChangePasswordInCoder, err = coding.NewAvro(_UserCenterChangePasswordInSchema)
	if err != nil {
		panic(err)
	}
	_UserCenterChangePasswordOutCoder, err = coding.NewAvro(_UserCenterChangePasswordOutSchema)
	if err != nil {
		panic(err)
	}

	_UserCenterFuncList = []cRegister.FunInfo{

		{
			Name:      "SayHello",
			InSchema:  _UserCenterSayHelloInSchema,
			OutSchema: _UserCenterSayHelloOutSchema},

		{
			Name:      "Register",
			InSchema:  _UserCenterRegisterInSchema,
			OutSchema: _UserCenterRegisterOutSchema},

		{
			Name:      "Login",
			InSchema:  _UserCenterLoginInSchema,
			OutSchema: _UserCenterLoginOutSchema},

		{
			Name:      "ChangePassword",
			InSchema:  _UserCenterChangePasswordInSchema,
			OutSchema: _UserCenterChangePasswordOutSchema},
	}
}

func (d *UserCenter) Do(ctx context.Context, fun string, param []byte) (result []byte, err error) {
	switch fun {

	case "SayHello":
		var in _UserCenterSayHelloIn
		err = _UserCenterSayHelloInCoder.DecodeIn(param, &in)
		if err != nil {
			panic(err)
		}

		res1 := d.SayHello(

			in.F1,
		)
		if err != nil {
			return nil, err
		}
		var out _UserCenterSayHelloOut
		out.F1 = res1

		res, err := _UserCenterSayHelloOutCoder.Encode(out)
		if err != nil {
			panic(err)
		}
		return res, nil

	case "Register":
		var in _UserCenterRegisterIn
		err = _UserCenterRegisterInCoder.DecodeIn(param, &in)
		if err != nil {
			panic(err)
		}

		res1, res2 := d.Register(

			in.F1, in.F2,
		)
		if err != nil {
			return nil, err
		}
		var out _UserCenterRegisterOut
		out.F1 = res1
		out.F2 = res2

		res, err := _UserCenterRegisterOutCoder.Encode(out)
		if err != nil {
			panic(err)
		}
		return res, nil

	case "Login":
		var in _UserCenterLoginIn
		err = _UserCenterLoginInCoder.DecodeIn(param, &in)
		if err != nil {
			panic(err)
		}

		res1, res2 := d.Login(

			in.F1, in.F2,
		)
		if err != nil {
			return nil, err
		}
		var out _UserCenterLoginOut
		out.F1 = res1
		out.F2 = res2

		res, err := _UserCenterLoginOutCoder.Encode(out)
		if err != nil {
			panic(err)
		}
		return res, nil

	case "ChangePassword":
		var in _UserCenterChangePasswordIn
		err = _UserCenterChangePasswordInCoder.DecodeIn(param, &in)
		if err != nil {
			panic(err)
		}

		err := d.ChangePassword(

			in.F1, in.F2,
		)
		if err != nil {
			return nil, err
		}
		var out _UserCenterChangePasswordOut

		res, err := _UserCenterChangePasswordOutCoder.Encode(out)
		if err != nil {
			panic(err)
		}
		return res, nil

	default:
		err = errors.New("rpc call error: fun not exist")
	}
	return
}

func (d *UserCenter) FuncList() []cRegister.FunInfo {
	return _UserCenterFuncList
}
